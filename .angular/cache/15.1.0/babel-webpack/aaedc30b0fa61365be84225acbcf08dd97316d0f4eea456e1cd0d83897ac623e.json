{"ast":null,"code":"import { BehaviorSubject, throwError } from 'rxjs';\nimport { catchError, tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let BandsService = /*#__PURE__*/(() => {\n  class BandsService {\n    constructor(http) {\n      this.http = http;\n      this.BandsServiceUrl = 'http://localhost:3000/bands';\n      this._bands$ = new BehaviorSubject([]);\n      this.bands$ = this._bands$.asObservable();\n      this.refreshBandsList();\n    }\n    refreshBandsList() {\n      this.getBands().subscribe(res => {\n        this._bands$.next(res);\n      });\n    }\n    getBands() {\n      return this.http.get(this.BandsServiceUrl).pipe(catchError(err => this.handleError(err, 'getBands')));\n    }\n    postBand(band) {\n      return this.http.post(this.BandsServiceUrl, band).pipe(catchError(err => this.handleError(err, 'postBand', band)));\n    }\n    deleteBand(id) {\n      const url = this.BandsServiceUrl + '/' + id;\n      return this.http.delete(url).pipe(catchError(err => this.handleError(err, 'deleteBand', id)));\n    }\n    handleError(error, methodName, obj) {\n      if (error.status === 0) {\n        // A client-side or network error occurred. Handle it accordingly.\n        console.error('An error occurred:', error.error);\n      } else {\n        // The backend returned an unsuccessful response code.\n        // The response body may contain clues as to what went wrong.\n        console.error(`Backend returned code ${error.status}, body was: `, error.error);\n      }\n      // Return an observable with a user-facing error message.\n      return throwError('Something went wrong, please try again later.' + methodName + ' ' + obj);\n    }\n    addBand(band) {\n      this.postBand(band).pipe(tap(() => this.refreshBandsList()), catchError(err => this.handleError(err, 'addBand', 'AddBandRequest: ' + band))).subscribe();\n    }\n    removeBand(bandId) {\n      this.deleteBand(bandId).pipe(tap(() => this.refreshBandsList()), catchError(err => this.handleError(err, 'removeBand', 'bandId: ' + bandId))).subscribe();\n    }\n  }\n  BandsService.ɵfac = function BandsService_Factory(t) {\n    return new (t || BandsService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  BandsService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: BandsService,\n    factory: BandsService.ɵfac,\n    providedIn: 'root'\n  });\n  return BandsService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}